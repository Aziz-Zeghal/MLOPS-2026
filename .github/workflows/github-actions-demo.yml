name: GitHub Actions Demo
on: [push]
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
  
  Build-Docker-Image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_SECRET }}

      - name: Build and push Docker image
        run: |
          cd TP1
          IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/my_app:latest
          docker build --tag $IMAGE_NAME .

  Deploy:
    runs-on: ubuntu-latest
    needs: Build-Docker-Image
    steps:
      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy to remote VM
        run: |
          REPO=${GITHUB_REPOSITORY}
          BRANCH=${GITHUB_REF_NAME}
          ACTOR=${GITHUB_ACTOR,,}
          OWNER=${GITHUB_REPOSITORY_OWNER,,}

          sshpass -p "${{ secrets.VM_PASSWORD }}" ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.VM_HOST }} << EOF
          set -e

          # Remove previous folder and clone fresh
          rm -rf ~/az
          git clone https://github.com/$REPO.git ~/az
          cd ~/az
          git checkout $BRANCH

          # Pull & run the Docker image
          IMAGE_NAME=ghcr.io/$OWNER/my_app:latest
          echo "Pulling latest image \$IMAGE_NAME"
          docker login ghcr.io -u "$ACTOR" -p "${{ secrets.DOCKER_SECRET }}"
          docker pull \$IMAGE_NAME
          docker stop my_app || true
          docker rm my_app || true
          docker run -d --name my_app -p 80:80 \$IMAGE_NAME
          EOF
